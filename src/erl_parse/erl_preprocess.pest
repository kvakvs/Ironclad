// Split an ERL source into macro definitions, conditional compile directives and everything else

file = { file_item* }
file_item = _{ pp_directive | text | string }

// Particular case: Include directive -include("path").
pp_directive_include = { "-" ~ "include" ~ "(" ~ string ~ ")" ~ "." }

// Particular case: Include directive -include_lib("path").
pp_directive_include_lib = { "-" ~ "include_lib" ~ "(" ~ string ~ ")" ~ "." }

// Generic case: Any directive with 'ident' as a name and some comma separated args
pp_directive = { "-" ~ ident ~ pp_directive_args? ~ "." }
pp_directive_args = { "(" ~ pp_directive_arg? ~ ("," ~ pp_directive_arg)* ~ ")" }
pp_directive_arg = { ( !( "," | ")" ) ~ ANY )+ }

string = ${ "\"" ~ string_inner ~ "\"" }
string_inner = @{ string_char }
string_char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

ident = { (ASCII_ALPHA_LOWER | "_") ~ (ASCII_ALPHA_LOWER | ASCII_DIGIT | "_")* }

text = { ANY+ }

WHITESPACE = _{ " " | "\t" | LINE_SEPARATOR }
COMMENT = _{ "%" ~ (!LINE_SEPARATOR ~ ANY)* ~ LINE_SEPARATOR }
